= render 'progress', :step => 4

%p.review_pins
  Please review your pins and make any changes necessary before importing. You can mass edit the pin type or age group for all pins in a board, or edit pins individually.
= form_for :pins, :url => pin_import_step_5_path, :html => {:id => 'import_form'} do |f|
  %ul.importing_boards
    - @boards.each do |board|
      %li.importing_board{:data => {:board_id => board.id}}
        .board_info
          %h3 
            %span
              Board
            #{board.name}
          = image_tag board.cover.url
          %label
            = check_box_tag 'mass-select-board'
            Mass edit all pins in board
          
        %ul.importing_pins
          - @pins_to_import.select{|p| p.board_id == board.id}.each_with_index do |pin, idx|
            = f.fields_for "[#{board.id}.#{idx}]", pin do |p|
              %li.importing_pin{:class => cycle('even', 'odd'), :data => {:pin_id => idx}}
                - if pin.errors.count > 0
                  .pin_errors= pin.errors.full_messages.uniq.map(&:downcase).to_sentence.capitalize
                .pin_photo
                  - the_url = pin.remote_image_url || pin.cached_remote_image_url || pin.cached_remote_small_image_url || pin.image.v222.url
                  - if the_url.blank?
                    %strong Missing Image URL 
                  - else
                    = image_tag the_url
                  
                  
                  
                .pin_info
                  .status_boxes
                    .status_box.otherStatus √
                    .status_box.ageGroupStatus √
                    .status_box.pinTypeStatus √
                  
                  = p.hidden_field :remote_image_url, :value => pin.remote_image_url || pin.cached_remote_image_url
                  = p.hidden_field :cached_remote_image_url
                  = p.hidden_field :cached_remote_small_image_url
                  = p.hidden_field :external_id
                  = p.hidden_field :via_url
                  = p.hidden_field :board_id
                  
                  .line.no-tag
                    %strong Description
                    = p.text_area :description, :class => 'other_input'
                  .line
                    %strong Age Group
                    = p.select :age_group_id, [['Select an Age Group', '']] + select_options(AgeGroup.all_cached), {}, :class => 'age_group_id'
                  .line
                    %strong Pin Type
                    - Pin::VALID_TYPES.each do |kind|
                      %label.radio_opt
                        = p.radio_button :kind, kind, :class => 'pin_type'
                        = kind.titleize
                  .line.no-tag
                    %strong
                      URL
                      %span (optional)
                    = p.text_field :url, :class => 'other_input', :placeholder => 'Links to Pinterest Pin if not defined' 
                  .line.field-price.no-tag
                    %strong 
                      Price
                      %span (optional)
                    = p.text_field :price
                .misc
                  .open_close_controls
                    = link_to_function 'Remove pin from Import', "toggleImportingThisPin(this)"
                  .mass_edit
                    = check_box_tag 'mass-select'
                    Mass Edit
                .clearfix

    .clearfix
  .clearfix

  .submit_bar
    = f.submit 'Complete Import &rarr;'.html_safe, :class => 'btn primary'
    
#mass-edit-controls
  .wrap
    %h3 
      Mass Editing:
      .count
        Changes will modify
        %span.number 0
    .fields
      .field
        %strong Pin Type:
        - Pin::VALID_TYPES.each do |kind|
          %label.radio_opt
            = radio_button_tag :kind, kind
            = kind.titleize
      .field
        %strong Pin Age Group:
        = select_tag :age_group_id, options_for_select([['Select an Age Group', '']] + select_options(AgeGroup.all_cached))
  .clearfix    
    
.clearfix

- if @imported
  - content_for :footer_js do
    :javascript
      importedPins("#{escape_javascript Pin.json_for_pins(@imported)}");