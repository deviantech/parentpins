dragSection = $('.drag_section_wrapper')
dropSection = $('.drop_section_wrapper')
footer = $('.submit_bar')
form = null

hideShowPinsForSelectedBoard = () ->
  id = dragSection.find('ul.boards li.selected').data('board-id')
  soon = () =>
    dragSection.find('li.pin').hide()
    dragSection.find("li.pin.board_#{id}").show()
    checkIfAnyDraggableLeft()

  # Give JS time to reset to having dropped pin (not sure why, but required)
  setTimeout soon, 1

submitOnEnter = (e) ->
  if e.which == 13 # Enter pressed
    form.submit()

checkIfAnyDraggableLeft = () ->
  section = dragSection.find('ul.pins')
  section.find('.no-more').remove()
  unless section.find('li.pin:visible').length
    scope = if dragSection.find('ul.boards li.selected').data('board-id') == 'all' then '' else " in this board "
    section.append("<div class='no-more'>List of pins #{scope} to assign is empty.</div>")
  
  if section.find('li.pin').length
    footer.find('.instructions').show()
    footer.find('.hide_until_complete').hide()
    $(window).off 'keypress', submitOnEnter
  else
    footer.find('.instructions').hide()
    footer.find('.hide_until_complete').show()
    $(window).on 'keypress', submitOnEnter
  
# DATA -- assign kind or age group to handle both steps
collectPinDataFrom = (selector, extraKey) ->
  data = []
  selector.each () ->
    extraVal = extraKey && $(this).data(extraKey.replace(/_/g, '-'))
    
    $(this).find('li.pin').each (idx, pin) ->
      attribs = $(this).data('attributes')
      toSet = {}
      toSet[extraKey] = extraVal
      if extraVal then $.extend(attribs, toSet)
      data.push(attribs)
      
  return data

handleSubmission = () ->
  if $('.drag_section_wrapper li.pin').length && !form.data('go-back')
    alert("Please drag ALL pins to one of the boxes on top first.")
    return false
  else
    data = if form.data('go-back')
      collectPinDataFrom( $('.context.step_drag_to_assign') )
    else
      collectPinDataFrom( dropSection.find('.drop-target'), dropSection.data('extra-key') )
    
    # Because .param requires an object, not an array of objects
    dataAsObject = {}
    $.each data, (idx, item) ->
      dataAsObject[idx] = item
    
    form.find('input[name=data_string]').val( $.param({pins: dataAsObject}) )
    true

dropOpts = {
  hoverClass: "ui-state-active",
  drop: (event, ui) ->
    helper = $(ui.helper)
    target = $(this).find('.collection')

    if helper.hasClass('from-board')
      target.append(ui.draggable)
    else if helper.hasClass('pins')
      target.append( helper.data('multidrag').css({left: 0, top: 0}).removeClass('ui-selected').addClass('from-board').draggable(dragOnceDroppedOpts) )
      $(ui.draggable).remove()
    else if helper.hasClass('board')
      dragSection.find('li.pin.board_'+helper.data('board-id')).appendTo(target)
    checkIfAnyDraggableLeft()
}
dropOptsBackToDraggable = {
  hoverClass: 'ui-state-active',
  drop: (event, ui) ->
    target = $(this).find('ul.pins')
    target.append(ui.draggable)
    hideShowPinsForSelectedBoard()
}
dragOpts = {
  revert: 'invalid',
  stack: 'li.pin',
  delay: 0, # Needed to prevent accidental drag when trying to select
  cursor: "move", 
  cursorAt: { top: -5, left: -5 },
  start: (event, ui) ->
    item = $(event.target).css({opacity: 0.5})
  stop: (e, ui) ->
    ui.helper.data('item').css({opacity: 1.0})
  helper: (e) ->
    helper = $('<ul class="pins"/>')
    item = $(e.currentTarget)
    if !item.hasClass('ui-selected')
      item.addClass('ui-selected').siblings().removeClass('ui-selected')
    elements = item.parent().children('.ui-selected').clone()
    item.siblings('.ui-selected').remove()
    helper.data('multidrag', elements).data('item', item).append(elements)
}
boardDragOpts = {
  revert: 'invalid',
  stack: 'li.pin',
  delay: 0, # Needed to prevent accidental drag when trying to select
  helper: 'clone',
  start: (event, ui) ->
    item = $(event.target).css({opacity: 0.5})
  stop: (e, ui) ->
    $(this).css({opacity: 1.0})
}
dragOnceDroppedOpts = {
  revert: 'invalid',
  stack: 'li.pin',
  helper: 'clone',
  cursor: "move", 
  cursorAt: { top: -5, left: -5 },
  start: (event, ui) ->
    item = $(event.target).css({opacity: 0.5})
  stop: (e, ui) ->
    $(this).css({opacity: 1.0})
}


  

$(document).ready () ->
  wrapper = $('.context.step_drag_to_assign')
  return unless wrapper.length

  checkIfAnyDraggableLeft()
  
  dropSection.find('li.drop-target').droppable(dropOpts)
  dragSection.droppable(dropOptsBackToDraggable)
  
  # dragSection.find('ul.pin').selectable({delay: 50})
  dragSection.find('li.pin').draggable(dragOpts)
  dropSection.find('li.pin').draggable(dragOnceDroppedOpts)
  dragSection.find('li.board').draggable(boardDragOpts)


  #
  # TODO: hook up multi drag
  #
  
  dragSection.on 'click', 'li.board', (e) ->
    $(e.currentTarget).addClass('selected').siblings().removeClass('selected')
    hideShowPinsForSelectedBoard()
  
  
  form = $('#import_form')
  form.find('.btn.previous').on 'click', () ->
    if form.data('previous')
      form.data('go-back', true)
      form.attr('action', form.data('previous'))
    
  form.on 'submit', (e) ->
    handleSubmission()
