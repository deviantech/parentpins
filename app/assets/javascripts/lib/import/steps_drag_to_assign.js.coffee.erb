dragSection = $('.drag_section_wrapper')
dropSection = $('.drop_section_wrapper')
selectTarget = null
form = null
boardsAreShown = dragSection.find('ul.boards').length > 0

updateBoardPendingPinsCounters = () ->
  if !boardsAreShown then return
  
  allEmpty = true
  dragSection.find('ul.boards li').each () ->
    board = $(this)
    counter = board.find('.counter')
    if counter.length
      count = dragSection.find("li.pin.board-#{board.data('board-id')}").length
      counter.html("(#{count})")
      allEmpty = false unless count == 0
      if count == 0 then board.addClass('empty') else board.removeClass('empty')
  
  firstBoard = dragSection.find('ul.boards li').first()
  if allEmpty then firstBoard.addClass('empty') else firstBoard.removeClass('empty')

hideShowPinsForSelectedBoard = () ->
  id = dragSection.find('ul.boards li.selected').data('board-id')
  soon = () =>
    if boardsAreShown && id
      dragSection.find('li.pin').hide().removeClass('ui-selected')
      dragSection.find("li.pin.board-#{id}").show()
    checkIfAnyDraggableLeft()

  # Give JS time to reset to having dropped pin (not sure why, but required)
  setTimeout soon, 1

submitOnEnter = (e) ->
  if e.which == 13 # Enter pressed
    form.submit()

window.checkIfAnyDraggableLeft = () ->
  soon = () ->
    updateBoardPendingPinsCounters()
    section = dragSection.find('ul.pins')
    hideBoards = false
    if boardsAreShown && section.find('li.pin').length == 0 then hideBoards = true
    
    section.find('.no-more').remove()
    unless section.find('li.pin:visible').length
      console.log !boardsAreShown || dragSection.find('ul.boards li.selected').data('board-id') == 'all'
      if !boardsAreShown || dragSection.find('ul.boards li.selected').data('board-id') == 'all'
        hideBoards = true
      else
        section.append("<div class='no-more'>You've already assigned all pins in this board.</div>")

    theBoards = $('.drag_section_wrapper ul.boards')
    if hideBoards then theBoards.hide() else theBoards.show() 
    
    showWhenComplete = dragSection.find('.hide_until_complete')
    if showWhenComplete.length
      if section.find('li.pin').length
        showWhenComplete.hide()
        dragSection.find('ul.pins').removeClass('short-bottom')
        $(window).off 'keypress.for-submit', submitOnEnter
      else
        section.find('.no-more').remove() 
        showWhenComplete.show()
        dragSection.find('ul.pins').addClass('short-bottom')
        $(window).on 'keypress.for-submit', submitOnEnter

    showWhenAssigned = $('.hide_until_any_assigned')
    if showWhenAssigned.length
      if dropSection.find('li.pin').length
        showWhenAssigned.slideDown()
      else
        showWhenAssigned.slideUp()
      

  setTimeout soon, 10 # Let drag complete first
  
# DATA -- assign kind or age group to handle both steps
collectPinDataFrom = (selector, extraKey) ->  
  data = []
  selector.each () ->
    extraVal = extraKey && $(this).data(extraKey.replace(/_/g, '-'))
    
    $(this).find('li.pin').each (idx, pin) ->
      attribs = $(this).data('attributes')
      toSet = {}
      toSet[extraKey] = extraVal
      
      if extraVal then $.extend(attribs, toSet)
      data.push(attribs)
      
  return data

handleSubmission = (form) ->
  if form.data('only') == 'any' && $('.drop_section_wrapper li.pin').length == 0
    alert("Please drag at least one pin down to the boxes first.")
    return false
  else if form.data('only') != 'any' && $('.drag_section_wrapper li.pin').length && !form.data('go-back')
    alert("Please drag ALL pins down to the boxes first.")
    return false
  else
    data = if form.data('go-back')
      collectPinDataFrom( $('.context.step_drag_to_assign') )
    else
      collectPinDataFrom( dropSection.find('.drop-target'), dropSection.data('extra-key') )
        
    # Because .param requires an object, not an array of objects
    dataAsObject = {}
    $.each data, (idx, item) ->
      dataAsObject[idx] = item
    
    form.find('input[name=data_string]').val( $.param({pins: dataAsObject}) )
    true

drop = {
  onDroppable: {
    activeClass: "ui-droppable-active",
    hoverClass: "ui-droppable-hovering",
    tolerance: 'pointer',
    accept: (draggable) ->
      return !draggable.parents().is(this)
    drop: (event, ui) ->
      helper = $(ui.helper)
      target = $(this).find('.collection')

      toAdd = if helper.hasClass('from-drop-target')
        ui.draggable
      else if helper.hasClass('multi-drag-helper')
        helper.data('origElements')
      else if helper.hasClass('board')
        dragSection.find('li.pin.board-'+helper.data('board-id'))
      
      # callingn draggable before draggable('destroy') to avoid edge case where it's not a draggable yet (not sure how to test, but calling with no arguments doesn't seem to override anything)
      toAdd.css({left: 0, top: 0, opacity: 1.0}).removeClass('ui-selected').addClass('from-drop-target').draggable().draggable('destroy').draggable(drag.pinsFromDroppable).appendTo(target)
      checkIfAnyDraggableLeft()
      applyDroppableMasonry()
    deactivate: (event, ui) ->
      $('li.pin').css({opacity: 1.0})
  },
  onDraggable: {
    activeClass: "ui-droppable-active",
    hoverClass: 'ui-droppable-hovering',
    accept: 'li.pin.from-drop-target',
    tolerance: 'pointer',
    drop: (event, ui) ->
      target = $(this).find('ul.pins')
      $(ui.draggable).removeClass('from-drop-target').data('from-drop-target', null).draggable().draggable('destroy').draggable(drag.pinsToDroppable).appendTo(target)
      hideShowPinsForSelectedBoard()
  }
}

drag = {
  general: {
    revert: 'invalid',
    stack: 'li.pin',
    zIndex: 10000000,
    helper: 'clone',
    cursorAt: { top: -5, left: -5 },
    containment: '.context.import',
    delay: 0,
    distance: 0,
    start: (e, ui) ->
      $(e.target).css({opacity: 0.5})
      $('body').css('cursor', 'move')
    stop: (e, ui) ->
      $(e.target).css({opacity: 1.0})
      $('body').css('cursor', 'auto')
  }
}  
drag.pinsFromDroppable = $.extend({}, drag.general)
drag.boardsToDroppable = $.extend({}, drag.general, {cursorAt: null, delay: 5})
drag.pinsToDroppable = $.extend({}, drag.general, window.multiDragOpts)

applyDroppableMasonry = () ->
  dropUL = $('ul.drop_sections')
  if dropUL.data('masonry')
    dropUL.masonry('layout')
  else
    dropUL.masonry({itemSelector: 'li.drop-target'})
  

# Used when boards added via ajax
window.stepOneAddDroppableBoard = (board) ->
  dropSection.find('.boards-needed').hide()
  built = $(board).droppable(drop.onDroppable).show()
  dropSection.find('.drop_sections').append( built ).masonry('appended', built)


$(document).ready () ->
  wrapper = $('.context.step_drag_to_assign')
  return unless wrapper.length

  checkIfAnyDraggableLeft()
  applyDroppableMasonry()
  
  dropSection.find('li.drop-target').droppable drop.onDroppable
  dragSection.droppable drop.onDraggable
  
  dragSection.find('li.pin').draggable drag.pinsToDroppable
  dropSection.find('li.pin').draggable drag.pinsFromDroppable
  dragSection.find('li.board').draggable drag.boardsToDroppable

  selectTarget = dragSection.find('ul.pins').disableSelection()
  selectTarget.selectable({})
  
  dragSection.on 'mousedown', 'li.board', (e) ->
    $(e.currentTarget).addClass('selected').siblings().removeClass('selected')
    hideShowPinsForSelectedBoard()
    
  $('#import_form').on 'submit', (e) ->
    handleSubmission( $(this) )
