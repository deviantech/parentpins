dragSection = $('.drag_section_wrapper')
dropSection = $('.drop_section_wrapper')
footer = $('.submit_bar')
selectTarget = null
form = null
boardsAreShown = dragSection.find('ul.boards').length > 0

updateBoardPendingPinsCounters = () ->
  if !boardsAreShown then return
  
  allEmpty = true
  dragSection.find('ul.boards li').each () ->
    board = $(this)
    counter = board.find('.counter')
    if counter.length
      count = dragSection.find("li.pin.board_#{board.data('board-id')}").length
      counter.html("(#{count})")
      allEmpty = false unless count == 0
      if count == 0 then board.addClass('empty') else board.removeClass('empty')
  
  firstBoard = dragSection.find('ul.boards li').first()
  if allEmpty then firstBoard.addClass('empty') else firstBoard.removeClass('empty')

hideShowPinsForSelectedBoard = () ->
  id = dragSection.find('ul.boards li.selected').data('board-id')
  soon = () =>
    if boardsAreShown && id
      dragSection.find('li.pin').hide()
      dragSection.find("li.pin.board_#{id}").show()
    checkIfAnyDraggableLeft()

  # Give JS time to reset to having dropped pin (not sure why, but required)
  setTimeout soon, 1

submitOnEnter = (e) ->
  if e.which == 13 # Enter pressed
    form.submit()

checkIfAnyDraggableLeft = () ->
  soon = () ->
    updateBoardPendingPinsCounters()
    section = dragSection.find('ul.pins')
    section.find('.no-more').remove()
    unless section.find('li.pin:visible').length
      msg = if !boardsAreShown || dragSection.find('ul.boards li.selected').data('board-id') == 'all'
        "Congrats, you've assigned all pins!"
      else
        "You've already assigned all pins in this board."
      section.append("<div class='no-more'>#{msg}</div>")
  
    if section.find('li.pin').length
      footer.find('.instructions').show()
      footer.find('.hide_until_complete').hide()
      $(window).off 'keypress', submitOnEnter
    else
      footer.find('.instructions').hide()
      footer.find('.hide_until_complete').show()
      $(window).on 'keypress', submitOnEnter
  setTimeout soon, 10 # Let drag complete first
  
# DATA -- assign kind or age group to handle both steps
collectPinDataFrom = (selector, extraKey) ->
  data = []
  selector.each () ->
    extraVal = extraKey && $(this).data(extraKey.replace(/_/g, '-'))
    
    $(this).find('li.pin').each (idx, pin) ->
      attribs = $(this).data('attributes')
      toSet = {}
      toSet[extraKey] = extraVal
      if extraVal then $.extend(attribs, toSet)
      data.push(attribs)
      
  return data

handleSubmission = () ->
  if $('.drag_section_wrapper li.pin').length && !form.data('go-back')
    alert("Please drag ALL pins to one of the boxes on top first.")
    return false
  else
    data = if form.data('go-back')
      collectPinDataFrom( $('.context.step_drag_to_assign') )
    else
      collectPinDataFrom( dropSection.find('.drop-target'), dropSection.data('extra-key') )
    
    # Because .param requires an object, not an array of objects
    dataAsObject = {}
    $.each data, (idx, item) ->
      dataAsObject[idx] = item
    
    form.find('input[name=data_string]').val( $.param({pins: dataAsObject}) )
    true

drop = {
  onDroppable: {
    activeClass: "ui-droppable-active",
    hoverClass: "ui-droppable-hovering",
    tolerance: 'pointer',
    accept: (draggable) ->
      return !draggable.parents().is(this)
    drop: (event, ui) ->
      helper = $(ui.helper)
      target = $(this).find('.collection')

      toAdd = if helper.hasClass('from-drop-target')
        ui.draggable
      else if helper.hasClass('multi-drag-helper')
        helper.data('origElements')
      else if helper.hasClass('board')
        dragSection.find('li.pin.board_'+helper.data('board-id'))
      
      toAdd.css({left: 0, top: 0}).removeClass('ui-selected').addClass('from-drop-target').draggable('destroy').draggable(drag.pinsFromDroppable).appendTo(target)
      checkIfAnyDraggableLeft()
  },
  onDraggable: {
    activeClass: "ui-droppable-active",
    hoverClass: 'ui-droppable-hovering',
    accept: 'li.pin.from-drop-target',
    tolerance: 'pointer',
    drop: (event, ui) ->
      target = $(this).find('ul.pins')
      $(ui.draggable).removeClass('from-drop-target').data('from-drop-target', null).draggable('destroy').draggable(drag.pinsToDroppable).appendTo(target)
      hideShowPinsForSelectedBoard()
  }
}


drag = {
  general: {
    revert: 'invalid',
    stack: 'li.pin',
    helper: 'clone',
    cursorAt: { top: -5, left: -5 },
    containment: '.context.import',
    delay: 0,
    distance: 0,
    start: (e, ui) ->
      $(e.target).css({opacity: 0.5})
      $('body').css('cursor', 'move')
    stop: (e, ui) ->
      $(e.target).css({opacity: 1.0})
      $('body').css('cursor', 'auto')
  }
}  
drag.pinsFromDroppable = $.extend({}, drag.general)
drag.boardsToDroppable = $.extend({}, drag.general, {cursorAt: null})
drag.pinsToDroppable = $.extend({}, drag.general, {
  revertDuration: 0,
  cursorAt: null,

  helper: (e) ->
    item = $(e.currentTarget)
    if item.hasClass('ui-selected') || item.parent().children('.ui-selected').length == 0
      # Build the actual helper
      item.addClass('ui-selected')
      helper = $('<div class="multi-drag-helper"/>')
      wrapper = $('<div class="multi-drag-helper-inner-wrapper"/>')
        
      origElements = item.parent().children('.ui-selected')
      clones = origElements.clone().removeClass('ui-selected')      
      helper.data('origElements', origElements).append( wrapper.append(clones) )
      total = origElements.length
      
      if total > 1
        counter = $("<div class='multi-drag-helper-counter'>#{origElements.length}</div>")
        helper.prepend(counter)
      
      helper.find('li').each (idx, clone) ->
        offset = total - idx
        $(clone).css({top: offset * 2, left: offset * 5, position: 'absolute', zIndex: idx})
      return helper
      
    else
      # Return default helper -- start function will kill the drag
      item.clone().removeAttr("id")
  start: (e, ui) ->
    item = $(e.currentTarget)
    
    # If already selected, and ctrl-click, just unselect
    if item.hasClass('ui-selected') && (e.metaKey || e.altKey || e.ctrlKey)
      setTimeout (() -> item.removeClass('ui-selected')), 10
      return false

    # If we're already part of a selection, or if nothing is selected and we were just clicked on, allow dragging    
    if item.hasClass('ui-selected') || item.parent().children('.ui-selected').length == 0
      item.addClass('ui-selected')
      elements = item.parent().children('.ui-selected').clone()
      elements.css('opacity', 0.5)
      $('body').css('cursor', 'move')
    # Other things are selected, we're not, and we were clicked on == skip dragging, allow selectable to do it's thing
    else
      return false
  stop: (e, ui) ->
    item = $(e.currentTarget)
    elements = item.parent().children('.ui-selected').clone()
    elements.css('opacity', 1.0)
    $('body').css('cursor', 'auto')
})

$(document).ready () ->
  wrapper = $('.context.step_drag_to_assign')
  return unless wrapper.length

  checkIfAnyDraggableLeft()


  
  dropSection.find('li.drop-target').droppable drop.onDroppable
  dragSection.droppable drop.onDraggable
  
  dragSection.find('li.pin').draggable drag.pinsToDroppable
  dropSection.find('li.pin').draggable drag.pinsFromDroppable
  dragSection.find('li.board').draggable drag.boardsToDroppable

  selectTarget = dragSection.find('ul.pins').disableSelection()
  selectTarget.selectable({})

  
  dragSection.on 'mousedown', 'li.board', (e) ->
    $(e.currentTarget).addClass('selected').siblings().removeClass('selected')
    hideShowPinsForSelectedBoard()
  
  
  form = $('#import_form')
  form.find('.btn.previous').on 'click', () ->
    if form.data('previous')
      form.data('go-back', true)
      form.attr('action', form.data('previous'))
    
  form.on 'submit', (e) ->
    handleSubmission()
