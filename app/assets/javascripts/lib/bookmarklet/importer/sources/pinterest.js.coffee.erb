window.ppImporterClasses ?= {}
window.ppImporterClasses.Sources ?= {}

class window.ppImporterClasses.Sources.Pinterest

  # Global class config
  outputDiv         = window.ppBookmarklet.contentBase
  progressDiv       = outputDiv.find('#noPotentialImages')
  progressSpinner   = if outputDiv.find('.progressSpinner').length then outputDiv.find('.progressSpinner') else $('<img src="' + window.ppBookmarklet.host + '<%= asset_path "ui/loader.gif" %>" alt="Loading" class="centered progressSpinner"/>').hide().insertAfter(progressDiv)
  appendTarget      = outputDiv
  maxPinConnections    = 5
  
  # Data selectors
  selectorForMultipleBoards = '.secretBoardHeader'
  boardSelector = '.boardLinkWrapper'
  pinSelector   = '.pinWrapper'

  debug = (str) ->
    if <%= Rails.env.development? ? 'true' : 'false' %>
      console.log("Bookmarklet: #{str}")

  # Because sometimes pinterest uses meta name, and sometimes meta property. Why? Good question.
  getMeta = (title, scope) ->
    $(scope).find("""meta[name="#{title}"], meta[property="#{title}"]""").first().attr('content')

  waitFor = (opts = {}) ->
    succeeded = false
    
    periodicCheck = () ->
      if opts.checkFn && opts.checkFn()
        succeeded = true
        clearInterval(checker)
        opts.onSuccess && opts.onSuccess()
        
    timeoutIfRequred = () ->
      if !succeeded
        opts.onFail && opts.onFail()
    
    checker = setInterval periodicCheck, opts.check_every
    setTimeout timeoutIfRequred, opts.timeout_after
  
  # TODO: shared with interactivity... also, why needed when updating div contents?
  toggleWindowRepaint = () ->
    body = $('body').first()
    curHeight = body.height()
    body.height(curHeight - 1).height(curHeight)
  
  # Because parseInt chokes on e.g. 12,345 (returns 12)
  asInteger = (str) ->
    val = parseInt(str.replace(/\D/g, ''), 10)
    if isNaN(val) then null else val
  
  # Clean up after ourselves when bookmarklet closes
  bookmarkletClosing: () ->
    outputDiv.find('iframe.ppBoardDetailFrame').remove()
  
  constructor: (@parent) ->
    @boardsData = []
    @pinsData = []    
    @boardDetailFrame = null
    @boardQueue = []
    @pinURLsToProcess = []
    @progressQueue = []
    @canUpdateProgress = true
    


  # If logged in, you can import your own. You can also import another user's if you're on their boards page specifically.
  checkIfCanGetData: () ->
    seemsLegit = true
    
    showError = (msg) ->
      progressDiv.addClass('red').html(msg)
      toggleWindowRepaint()
      seemsLegit = false
    

    if !P?.currentUser?.attributes?.username
      showError "You'll need to log into pinterest to import your pins."
    else
      username = window.location.pathname.split('/')[1]
      startURLs = if $('a.myBoards').length && $('a.myBoards').attr('href').split('/')[1] == username # On your own profile somewhere - current location matches the nav link path
        baseURLs = ["/#{P.currentUser.attributes.username}/boards/", "/#{P.currentUser.attributes.username}/"]
        if $(selectorForMultipleBoards).length
          @parent.Interactivity.setHeader "Importing boards and pins from your Pinterest account (#{P.currentUser.attributes.username})"
        else
          @parent.Interactivity.setHeader "Importing pins from this Pinterest board (#{$('.BoardHeader h1').text()})"
          @singleBoardOnly = true
          baseURLs.push window.location.pathname
          
        baseURLs
      else if $('.userStats li:first a').length || $('.BoardInfoBar .counts li:first a').hasClass('active') # Other user's profile
        name = getMeta('og:title', document) || username
        baseURLs = ["/#{username}/", "/#{username}/boards/"]
        if $('.BoardInfoBar .counts li:first a').hasClass('active')
          @singleBoardOnly = true
          @parent.Interactivity.setHeader "Importing pins from #{username}'s board (#{$('.BoardHeader h1').text()})"
          baseURLs.push window.location.pathname
        else
          @parent.Interactivity.setHeader "Importing boards and pins from: #{name}"
        baseURLs
      else
        # Slight possibility username isn't URL-valid... but this should usually work
        ["/#{P.currentUser.attributes.username}/boards/"]
      
      onStartPage = () ->
        (return true if thisURL == window.location.pathname) for thisURL in startURLs
        return false
        
      unless onStartPage()
        if P?.currentUser?.attributes?.username
          showError "To import your Pinterest pins, please run this bookmarklet from <a href='#{startURLs[0]}'>your Pinterest Boards page</a>."
        else
          showError "To import your Pinterest pins, please log into Pinterest and run this bookmarklet from your profile page."
        
    return seemsLegit

  getData: (callback) ->
    @processingAllBoards = new $.Deferred()
    @processingAllPins = new $.Deferred()

    # Once collected all data, pass it along to the callback function
    @processingAllPins.done () =>
      @reportProgress('Done processing. Passing data over to our servers...')
      progressSpinner.hide().remove()
      callback({boards: @boardsData, pins: @pinsData})

    @processingAllBoards.done () =>
      # Clean up the iframe
      if @boardDetailFrame
        @boardDetailFrame.remove()
        @boardDetailFrame = null
      
      # Now start working on the pins
      @pinURLsToProcess = @pinsData.map (pin) -> pin.pinterestURL
      @reportProgress "Done collecting boards.  Now processing pins (#{@pinURLsToProcess.length} remaining).", {delay: 10}
      @startProcessingPins()

    # Now start actually getting data
    if @singleBoardOnly || $(boardSelector).length 
      @processBoards() 
    else
      @reportProgress "No boards found!", {color: 'red'}

    
  reportProgress: (message, opts = {}) ->
    @progressQueue.push({msg: message, color: opts.color, delay: opts.delay || 60})
    if @canUpdateProgress then @checkProgressQueue()
    
  checkProgressQueue: () ->
    if next = @progressQueue.shift()
      return if progressDiv.hasClass('no-auto-updates')
      @canUpdateProgress = false
      progressSpinner.fadeIn()
      progressDiv.html(next.msg)    
      if next.color == 'red' # TODO: add ability to set color
        progressDiv.addClass('red') 
        progressSpinner.hide()
      toggleWindowRepaint()
      
      nextStep = () =>
        @canUpdateProgress = true
        @checkProgressQueue()
        
      setTimeout(nextStep, next.delay)
    else
      @canUpdateProgress = true
      
  

  # http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/ , converted to coffeescript, returning absolute value. Generating IDs for pinterest pins/boards, return as string.
  hashFromString: (string) ->
    hash = 0
    return hash if !string || string.length == 0
    for letter in string
      char = letter.charCodeAt(0)
      hash = ((hash << 5) - hash) + char
      hash = hash & hash # Convert to 32bit integer      
    Math.abs(hash) + ''

  pinForURL: (url) ->
    for pin in @pinsData
      return pin if pin.pinterestURL == url
    return null

  # ===================
  # = Processing Pins =
  # ===================
  startProcessingPins: () ->
    @pinsNeedingToComplete = maxPinConnections
    
    processOnePin = () =>
      thisURL = @pinURLsToProcess.pop()
      srcPin = @pinForURL(thisURL)

      if thisURL && srcPin
        # Note: if can get pin URL, could skip ajax entirely. Can get big image name from small one by changing URL (/236x/ -> /736x/): 
        # http://media-cache-ak2.pinimg.com/236x/49/4b/af/494bafca94dd0e2168fb4c8c7f914c78.jpg -> http://media-cache-ak2.pinimg.com/736x/49/4b/af/494bafca94dd0e2168fb4c8c7f914c78.jpg      
        @reportProgress "Done collecting boards.  Now processing pins (#{@pinURLsToProcess.length + 1} remaining)."

        
        pinRequest = $.get thisURL
        pinRequest.done (pinDATA) =>
          if pinDATA['page_info'] # Pinterest is conveniently handing us JSON directly
            srcPin.url      = pinDATA.page_info.meta['og:see_also']
            srcPin.imageURL = pinDATA.page_info.meta['og:image']
          else if pinDATA['split'] # OK, parse what we need out of the raw HTML
            head  = '<div>'+pinDATA.split('</head>')[0].split('</title>')[1]+'</div>' # Just grab the <head> section after the title, then wrap it in a DIV so jquery will parse
            srcPin.url        = getMeta 'og:see_also', head
            srcPin.imageURL   = getMeta 'og:image', head

        pinRequest.fail =>
          # TODO: do something here to indicate the failure and remove from array, so we don't rely on incomplete data down the road?

        pinRequest.always () =>
          processOnePin()
          if @pinURLsToProcess.length == 0 # We've just finished one of the last ones
            @pinsNeedingToComplete -= 1
            if @pinsNeedingToComplete == 0 # OK, we've just finished the actual last one
              @processingAllPins.resolve()
    

    for i in [1..maxPinConnections]
      processOnePin()


  # =====================
  # = Processing Boards =
  # =====================
  processBoards: () ->
    unless @singleBoardOnly
      @boardQueue = $.makeArray $(boardSelector)
    @boardDetailFrame ?= $('<iframe class="ppBoardDetailFrame">').appendTo( appendTarget ).css({position: 'absolute', top: '-100px', left: '-1000px', height: '50px', width: '50px', visibility: 'hidden'})
    # @boardDetailFrame.css({visibility: 'visible', left: '100px', top: '100px', height: '500px', width: '500px'})
    @processAnotherBoard()
    
  # To avoid overwhelming either the browser or the server, we load the boards sequentially
  processAnotherBoard: () ->
    frameDoc = null
    processingThisBoard = new $.Deferred()
    
    board = if @singleBoardOnly
      debug "On single board page"
      {
        name: $('.BoardHeader h1').text(),
        pinterestURL: window.location + '',
        expectedPins: $('.BoardInfoBar .counts li:first a')
      }
    else
      li = $( @boardQueue.pop() )
      debug "Multiple boards on page. Processing: #{li}"
      {
        name: $.trim( li.find('.boardName').text().replace(/^\s*Secret Board\s*/i, '') )
        pinterestURL: li.prop('href'),
        expectedPins: li.find('.boardPinCount')
      }

    board.expectedPins = asInteger( board.expectedPins.text() )

    board.id = @hashFromString(board.pinterestURL)
      
    boardMsg = if @boardQueue?.length then "Processing Board: #{board.name} (#{@boardQueue.length + 1} remaining)" else "Processing Board: #{board.name}"
    @reportProgress "#{boardMsg}. Discovered <span class='counter'>0</span> of #{board.expectedPins} pins.", {delay: 5}

    processingThisBoard.done () =>
      @boardsData.push board
      if (@singleBoardOnly || @boardQueue.length == 0) then @processingAllBoards.resolve() else @processAnotherBoard()

    processBoardDetails = () =>
      $(pinSelector, frameDoc).each (pidx, pin) =>
        pin = $(pin)
        pinData = {
          board_id:       board.id,
          description:    pin.find('.pinDescription').text(),
          domain:         pin.find('.pinDomain').text(),
          price:          pin.find('.priceValue').text(),
          smallImageURL:  pin.find('.pinImg.loaded').prop('src'), # May not be lazy loaded yet
          pinterestURL:   pin.find('a.pinImageWrapper').prop('href')
        }
        pinData.id = @hashFromString "#{board.id}:#{pinData.pinterestURL}"
        if pinData.pinterestURL.length > 4
          @pinsData.push pinData
      
      processingThisBoard.resolve()

    if board.expectedPins == 0
      processingThisBoard.resolve()
    else      
      @boardDetailFrame.off 'load' # Remove any previous listeners

      # After load scroll down to be sure all pins have been loaded via ajax, then parse
      @boardDetailFrame.on 'load', () =>
        frameDoc = @boardDetailFrame.contents()
        
        if isNaN(board.expectedPins)
          console.log "Unable to parse number of expected pins for board (#{board.name}), so waiting two seconds and hoping for the best"
          setTimeout processBoardDetails, 3000
        else
          timeout = 15 * 1000
          foundAllPins = null
          seenLastIteration = 0
          
          periodicCheck = () =>
            seen = frameDoc.find('.Pin.Module').length

            if seenLastIteration != seen
              @reportProgress("#{boardMsg}. Discovered #{i} of #{board.expectedPins} pins.") for i in [seenLastIteration..seen]
              seenLastIteration = seen
            
            if board.expectedPins == seen
              @reportProgress("#{boardMsg}. Discovered #{seen} of #{board.expectedPins} pins.", {delay: 800})
              foundAllPins = true
              clearInterval(pinCountChecker)
              processBoardDetails()
            else if seen > 0 # Page requires scrolling to spur loading additional pins
              frameDoc.scrollTop( frameDoc.height() )
      
          pinCountChecker = setInterval periodicCheck, 500
      
          timeOutIfRequired = () ->
            unless foundAllPins
              clearInterval(pinCountChecker)
              console.log "Board (#{board.name}) timed out trying to load all pins"
              processBoardDetails() # Will fail to find all pins, but can at least work with what we have
              # TODO: somehow indicate to user that some pins weren't collected
      
          setTimeout timeOutIfRequired, timeout
        
      # Now that listeners are in place, update the frame SRC (adding random param if necessary, because if src is same as current page iframe won't load)
      needsExtraParams = board.pinterestURL == (window.location + '') || board.pinterestURL == window.location.pathname
      theNewSrc = if needsExtraParams then "#{board.pinterestURL}?seed=#{Math.random()}" else board.pinterestURL
      @boardDetailFrame.attr('src', theNewSrc)