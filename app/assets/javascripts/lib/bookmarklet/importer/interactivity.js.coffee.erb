window.ppImporterClasses ?= {}
class window.ppImporterClasses.Interactivity
  
  # Global Class Config
  host                = window.ppBookmarklet.host
  stepOneURL          = host + '<%= Rails.application.routes.url_helpers.pin_import_step_1_path %>'   # Loaded in iframe directly from PP
  loaderImageURL      = host + '<%= asset_path("ui/loader.gif") %>'
  frameWrapperMargin  = 50

  outputDiv           = window.ppBookmarklet.contentBase
  outputDivWrapper    = outputDiv.parents('#ppBookmarkletContentWrapper')
  progressDisplay     = outputDiv.find('#progressDisplay')
  

  # When viewing an image directly, the browser creates minimal surrounding HTML that doesn't include a HEAD section
  appendTarget      = document.getElementsByTagName("head")[0] || document.getElementsByTagName("body")[0]

  # Share pp info retreived via ajax among any multiple instances (there should only be one, but still)
  ppPins = null
  ppBoards = null
  
  # ==================================================================
  # = Private functions that don't need access to instance variables =
  # ==================================================================
  
  # Odd timing issue with loading of bookmarklet SCSS, need to repaint window after step1 loaded
  triggerWindowRepaint = () ->
    body = $('body').first()
    curHeight = body.height()
    body.height(curHeight - 1).height(curHeight)

  # =======================================
  # = Methods (public interface of class) =
  # =======================================
  
  setHeader: (msg) ->
    # TODO: grab containing element from parent, pass into children, rather than this search over the whole page
    $('#ppHeaderCenter').html(msg)
  
  start: (data) ->
    @externalPinData = data.pins
    @externalBoardData = data.boards
    if @externalPinData.length == 0
      progressDisplay.html('No importable pins found.').addClass('red')
    else
      @transitionToStepOne()
    triggerWindowRepaint()

  bookmarkletClosing: () ->
    @iframeWrapper.find('iframe').remove() if @iframeWrapper
  
  # Note we define all methods under constructor to keep them private
  constructor: (@parent) ->
    unless window.ppBookmarklet
      alert("Importer must be loaded from the ParentPins bookmarklet!")
      return false

    # Instance variable declarations
    @iframeWrapper = null
    @stepOneFrame = null
    @externalPinData = []     # Expects an array with an id, board_id, and various pin fields
    @externalBoardData = []   # Expects an array with at least id and name fields

    # Preload loader img
    loader = new Image()
    loader.src = loaderImageURL
    
    # =================================
    # = Implementation helper methods =
    # =================================
    @pinsForBoard = (board_id) ->
      returning = []
      for pin in @externalPinData
        if pin.board_id == board_id then returning.push(pin)
      return returning
    
    @paramsForStepOne = () ->
      boards = {}
      for board in @externalBoardData
        boards[board.id] = {name: board.name, pins: @pinsForBoard(board.id)}

      return $.param({import: {boards: boards}, source: window.location.href})
    
    # =================================================================
    # = Step One - choose pins to import and assign to desired boards =
    # =================================================================

    @transitionToStepOne = () ->
      loaderHTML = """
        <div style="margin: 10px auto; font-size: 25px; color: #555; text-align: center; font-family: sans-serif;">
          Loading...
          <br>
          <img src="#{loaderImageURL}" alt="Spinner" class="loadingSpinner" style="margin-top: 15px;"/>
        </div>
        <form action="#{stepOneURL}" method="POST" id="loader" target="_top">
          <input type="hidden" name="data_string" value="#{@paramsForStepOne()}" />
        </form>
      """
            
      progressDisplay.addClass('no-auto-updates').html( loaderHTML )
      # Irritating, but give loader image time to load, so we're not showing a broken spinner
      setTimeout (() -> progressDisplay.find('form#loader').submit()), 500

