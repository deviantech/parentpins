//= require templates/bookmarklet/importer/iframe_loader

window.ppImporterClasses ?= {}
class window.ppImporterClasses.Interactivity
  
  # Global Class Config
  outputDiv         = $('#ppBookmarkletContent')
  outputDivWrapper  = outputDiv.parents('#ppBookmarkletContentWrapper')
  progressDiv       = outputDiv.find('#noPotentialImages')
  host              = '//<%= ActionMailer::Base.default_url_options[:host] + (ActionMailer::Base.default_url_options[:port] == 80 ? '' : ":#{ActionMailer::Base.default_url_options[:port]}") %>'
  stepOneURL        = host + '<%= Rails.application.routes.url_helpers.pin_import_step_1_path %>'   # Loaded in iframe directly from PP
  stepTwoURL        = host + '<%= Rails.application.routes.url_helpers.pin_import_step_2_path %>'   # Loaded in iframe directly from PP
                
  # When viewing an image directly, the browser creates minimal surrounding HTML that doesn't include a HEAD section
  appendTarget      = document.getElementsByTagName("head")[0] || document.getElementsByTagName("body")[0]

  # Share pp info retreived via ajax among any multiple instances (there should only be one, but still)
  ppPins = null
  ppBoards = null
  
  
  
  # ==================================================================
  # = Private functions that don't need access to instance variables =
  # ==================================================================
  
  # Odd timing issue with loading of bookmarklet SCSS, need to repaint window after step1 loaded
  toggleWindowRepaint = () ->
    body = $('body').first()
    curHeight = body.height()
    body.height(curHeight - 1).height(curHeight)

  # =======================================
  # = Methods (public interface of class) =
  # =======================================
  start: (data) ->
    @externalPinData = data
    @transitionToStepOne()

  bookmarkletClosing: () ->
    # TODO: remove any iframes created
    $(window).off 'message', @handleAnyPostedMessage

  # Note we define all methods under constructor to keep them private
  constructor: (@parent) ->
    # Instance variable declaration
    @iframeWrapper = null
    @stepOneDoc = null
    @stepOneFrame = null
    @stepTwoFrame = null
    @externalPinData = []

    $(window).on 'message', (evt) =>
      @handleAnyPostedMessage(evt)
    
    # =========================================================
    # = General or potentially-shared implementation methods  =
    # =========================================================
       
    @rubyFormattedPinData = (subset) ->
      data = subset || @externalPinData
      boards = {}
      
      for board in data
        boards[board.id] = {name: board.name, pins: board.pins}

      return {import: {boards: boards}}
    
    @ensureFrameWrapper = () ->
      @iframeWrapper ?= $('<div id="ppParentPinsImporterWrapper"></div>').appendTo( outputDiv )  

    @handleAnyPostedMessage = (event) ->
      if event.originalEvent.origin.replace(/^https?:/, '') != host
        console.log('Ignoring message from mismatchted source: ' + event.originalEvent.origin)
      else
        @handlePostedMessage(event.originalEvent)

    @handlePostedMessage = (event) ->
      if event.data.substr(0,11) == 'step1:next:'
        passed_string = event.data.substr(11, event.data.length)        
        @transitionToStepTwo(passed_string)
      else if event.data == 'step2:previous'
        @stepTwoFrame.hide()
        @stepOneFrame.show()
        toggleWindowRepaint()
      else if event.data == 'step2:done'
        # We could hide the iframe, if we wanted...
      else if event.data.substr(0,15) == 'step2:imported:'
        json_string = event.data.substr(15, event.data.length)
        pins = $.parseJSON(json_string)
        @stepOneWithImportedData(pins)
        toggleWindowRepaint()
    

    # =================================================================
    # = Step One - choose pins to import and assign to desired boards =
    # =================================================================

    @transitionToStepOne = () ->
      @ensureFrameWrapper()
      @stepTwoFrame.hide() if (@stepTwoFrame)
      @stepOneFrame ?= $('<iframe class="ppParentPinsImporter">').appendTo( @iframeWrapper )
      @stepOneFrame.height( outputDivWrapper.height() - outputDiv.offset().top ).show()
      @stepOneDoc = @stepOneFrame.contents()

      doc = @stepOneDoc[0]
      if doc
        doc.open()
        doc.write( JST['templates/bookmarklet/importer/iframe_loader']({data_string: $.param( @rubyFormattedPinData() ), url: stepOneURL}) )
        toggleWindowRepaint()
      else
        alert("Unable to access document for @stepOneFrame - maybe cross domain security issue?")



    # ==============================================================================
    # = Step 2 - set the extra required info for each pin, then actually save them =
    # ==============================================================================

    @transitionToStepTwo = (dataString) ->
      # Given a string of boardID.pinID pairs, look up the full data for each before sending to step 2

      # TODO: remove this and move all code out of importer, passing via window postbacks? then just quit importer if using old browser...
      # TODO: should we just have one iframe (maybe with another nested) rather than going back to parent on different domain for step1/step2 transitions?
      # TODO: clean up rubyFormattedPinData, other formatting to send consistent params, handle with one set on controller

      # Helper to get full data from pin ID
      dataForPinID = (pid) =>
        for board in @externalPinData
          for pin in board.pins
            return pin if pin.id == pid
        null    
      
      # Get full data for all pins to import
      pinsByBoard = {}
      for dataPair in dataString.split(':')
        [boardID, pinID] = dataPair.split('.')
        if pinData = dataForPinID(pinID)
          pinsByBoard[boardID] ?= []
          pinsByBoard[boardID].push pinData
      
      # Now display the Step 2 iframe
      @ensureFrameWrapper()
      @stepOneFrame.hide()
      @stepTwoFrame.remove() if @stepTwoFrame
      @stepTwoFrame = $('<iframe class="ppParentPinsImporter" name="ppParentPinsImporterStep2Frame">').appendTo( @iframeWrapper )
      @stepTwoFrame.height( outputDivWrapper.height() - outputDiv.offset().top ).show()

      # Note: loading the data as a param string inside a form so we can send a POST request (no URL length limit), but not via ajax (had authentication issues)
      @stepTwoFrame.contents()[0].write( JST['templates/bookmarklet/importer/iframe_loader']({data_string: $.param({import: {boards: pinsByBoard}}), url: stepTwoURL}) )
      toggleWindowRepaint()
