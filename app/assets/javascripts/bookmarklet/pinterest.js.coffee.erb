//= require templates/bookmarklet/pinterest/our_boards
//= require templates/bookmarklet/pinterest/step_1
//= require templates/bookmarklet/pinterest/step_2_load

# Note - maybe if eval in getScript (or just $.get callback, can pass in vars from other script?)

# Config
outputDiv         = $('#ppBookmarkletContent')
outputDivWrapper  = outputDiv.parents('#ppBookmarkletContentWrapper')
progressDiv       = outputDiv.find('#noPotentialImages') # TODO -- pass this in in case there's another with this ID in the original page's HTML
boardSelector     = '.UserBoards .item.gridSortable a.boardLinkWrapper'
pinSelector       = '.pinWrapper'
host        = '//<%= ActionMailer::Base.default_url_options[:host] + (ActionMailer::Base.default_url_options[:port] == 80 ? '' : ":#{ActionMailer::Base.default_url_options[:port]}") %>'
cssUrl      = host + "<%= asset_path('import-pinterest.css') %>"
boardsUrl   = host + '<%= Rails.application.routes.url_helpers.my_boards_path %>?callback=?' # Force jsonp request
stepTwoURL  = host + '<%= Rails.application.routes.url_helpers.pinterest_import_step_2_path %>' # Loaded in iframe directly from PP
debug       = false
useTestData = true

# When viewing an image directly, the browser creates minimal surrounding HTML that doesn't include a HEAD section
appendTarget = document.getElementsByTagName("head")[0] || document.getElementsByTagName("body")[0]

testData = [{"name":"Default","pinterestURL":"http://pinterest.com/dvntpins/default/","id": 236459021, "pins":[{"description":"Brandy Melville Tank $28","domain":"saltandseaweed.com","price":"$28.00","smallImageURL":"http://media-cache-ak1.pinimg.com/236x/06/49/09/06490959f16ea755c89e3b444a9e5686.jpg","pinterestURL":"http://pinterest.com/pin/442126888388601214/","id":511140869,"link":"http://www.saltandseaweed.com/collections/vendors?q=Brandy+Melville","imageURL":"http://media-cache-ak1.pinimg.com/736x/06/49/09/06490959f16ea755c89e3b444a9e5686.jpg"},{"description":"That's How a Pro Uses a Bunk Bed","domain":"memebase.cheezburger.com","price":"","smallImageURL":"http://media-cache-ak1.pinimg.com/236x/6e/06/34/6e063495136bfc91b8cfac6cd55e8557.jpg","pinterestURL":"http://pinterest.com/pin/442126888388218505/","id":1291275682,"link":"http://memebase.cheezburger.com/senorgif","imageURL":"http://media-cache-ak1.pinimg.com/736x/6e/06/34/6e063495136bfc91b8cfac6cd55e8557.jpg"},{"description":"ireland - Google Search","domain":"travel.nytimes.com","price":"","smallImageURL":"http://media-cache-ak1.pinimg.com/236x/49/4b/af/494bafca94dd0e2168fb4c8c7f914c78.jpg","pinterestURL":"http://pinterest.com/pin/442126888388183279/","id":599475931,"link":"http://travel.nytimes.com/travel/guides/europe/ireland/overview.html","imageURL":"http://media-cache-ak1.pinimg.com/736x/49/4b/af/494bafca94dd0e2168fb4c8c7f914c78.jpg"}]},{"name":"Secondary","pinterestURL":"http://pinterest.com/dvntpins/secondary/","id": 141808096, "pins":[{"description":"Brandy Melville Tank $28","domain":"saltandseaweed.com","price":"$28.00","smallImageURL":"http://media-cache-ak1.pinimg.com/236x/06/49/09/06490959f16ea755c89e3b444a9e5686.jpg","pinterestURL":"http://pinterest.com/pin/442126888388601214/","id":511140869,"link":"http://www.saltandseaweed.com/collections/vendors?q=Brandy+Melville","imageURL":"http://media-cache-ak1.pinimg.com/736x/06/49/09/06490959f16ea755c89e3b444a9e5686.jpg"}]}];

# Initial values
iframeWrapper = null
stepOneDoc = null
stepOneFrame = null
stepTowDoc = null
stepTwoFrame = null
processingAllBoards = new $.Deferred()
processingAllPins = new $.Deferred()
boardsData = []
boardsPending = $(boardSelector).length
pinsPending = 'unknown'

# One-time window setup
window.ppImporter ?= {}
window.ppImporter.state ?= {}

if !window.ppImporter.state['receiving_messages']
  $(window).on 'message', (event) ->
    if event.originalEvent.origin.replace(/^https?:/, '') != host
      console.log('Ignoring message from mismatchted source: ' + event.originalEvent.origin)
    else
      handlePostedMessage(event.originalEvent)
  window.ppImporter.state['receiving_messages'] = true

reportProgress = (custom) ->
  msg = if boardsPending == 0
    "Completed all boards! Collecting pin details... ("+pinsPending+" remaining)"
  else if boardsPending == 1
    "Collecting account information: one board remaining..."
  else
    "Collecting account information: " + boardsPending + ' boards remaining...'
  msg += " (tag: "+custom+")" if custom && debug
  progressDiv.text(msg)

reportProgress('initial load')

processingAllBoards.done () ->
  reportProgress('Done processing all boards')
  window.data = boardsData
  
  # Calculate how many to do
  pinsPending = 0
  for board in boardsData
    pinsPending += board.pins.length
  reportProgress('beginning to process pins')
  
  # Now start doing them
  for board in boardsData
    processThisPin(pin) for pin in board.pins

  
ensureFrameWrapper = () ->
  iframeWrapper ||= $('<div id="ppParentPinsImporterWrapper"></div>').appendTo( outputDiv )  
  
finalizedAPin = (pin) ->
  pinsPending -= 1
  reportProgress('processed a pin: '+pin.pinterestURL)
  console.log(pin)
  if pinsPending == 0
    processingAllPins.resolve()


# Workaround for non-supporting browsers
getIframeWindow = (iframeElement) ->
  iframeElement.contentWindow || iframeElement.contentDocument.parentWindow

processThisPin = (pin) ->
  unless pin.pinterestURL
    finalizedAPin(pin)
    return
        
  pinFrame = $('<iframe>').hide().attr('src', pin.pinterestURL).appendTo( $('body') )
  console.log('opening '+pin.pinterestURL)
  pinFrame.on 'load', () ->
    pin.link = getIframeWindow(this).jQuery('.detailed.Pin.Module .pinWrapper a').first().prop('href')
    pin.imageURL = getIframeWindow(this).jQuery('.detailed.Pin.Module .pinWrapper img.pinImage').first().prop('src')
    finalizedAPin(pin)
  
# http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/ , converted to coffeescript, returning absolute value. Generating IDs for pinterest boards.
hashFromString = (str) ->
  hash = 0
  return hash  if @length is 0
  i = 0
  while i < @length
    char = @charCodeAt(i)
    hash = ((hash << 5) - hash) + char
    hash = hash & hash # Convert to 32bit integer
    i++
  Math.abs(hash)


if useTestData
  boardsData = testData
  processingAllPins.resolve()
else
  $(boardSelector).each (bidx, board) ->
    processingThisBoard = new $.Deferred()
    $board = $(board)
    boardURL = $board.prop('href')
    boardName = $.trim( $board.find('.boardName').text() )
    boardPinData = []

    iframeAjaxSeen_Categories = false
    iframeAjaxSeen_Board = false
    alreadyProcessingBoard = false

    iframe = $('<iframe>').hide().attr('src', boardURL).appendTo( $('body') )
    iframe.show().css({position: 'absolute', left: '50px', top: (bidx*500)+'px', height: '500px', width: '500px', border: '2px solid #333', 'z-index': 9999999999999}) if debug

    processingThisBoard.done () ->
      boardsPending -= 1
      boardsData.push({
        name: boardName,
        pinterestURL: boardURL,
        pins: boardPinData,
        id: hashFromString(boardURL)
      })
      reportProgress('finished processing board: '+boardName)
      processingAllBoards.resolve() if boardsPending == 0
    
    processSingleBoard = () ->
      $ = getIframeWindow(iframe.get(0))
      # Scroll iframe down to try lazy loading later images
      $(iframe).contents().scrollTop( $(iframe).contents().height() )
    
      iframe.contents().find(pinSelector).each (pidx, pin) ->
        $pin = $(pin)
        boardPinData.push({
          description: $pin.find('.pinDescription').text(),
          domain: $pin.find('.pinDomain').text(),
          price: $pin.find('.priceValue').text(),
          smallImageURL: $pin.find('.pinImg.loaded').prop('src'),
          pinterestURL: $pin.find('a.pinImageWrapper').prop('href')
          id: hashFromString($pin.find('a.pinImageWrapper').prop('href'))
        })
      processingThisBoard.resolve()
    
    iframe.on 'load', () ->
      # Don't fully understand, but ajaxComplete seems to only work if use the jquery from the inner window 
      # (see untested answer on http://stackoverflow.com/questions/14563041/detect-content-of-iframe-change-the-content-is-dynamic-jquery-mobile) 
      getIframeWindow(this).jQuery(getIframeWindow(this).document).ajaxComplete (event, xhr, settings) ->
        return if alreadyProcessingBoard
        iframeAjaxSeen_Categories = true if /resource\/CategoriesResource\/get/.test(settings.url)
        iframeAjaxSeen_Board      = true if /resource\/BoardFeedResource\/get/.test(settings.url)
      
        # TODO: how handle if too many pins in board, pagination required?
        if (iframeAjaxSeen_Categories && iframeAjaxSeen_Board)
          alreadyProcessingBoard = true
          setTimeout(processSingleBoard, 100)




# =====================================================
# = Add events to enable interactivity on step_1 page =
# =====================================================  

hideShowPinsForSelectedBoard = () ->
  class_to_show = stepOneDoc.find('.importing_boards li.selected').attr('class').replace(/\s*selected\s*/, '')
  stepOneDoc.find('.importing_pins li.pin').hide()
  stepOneDoc.find('.importing_pins li.pin.' + class_to_show).show()
  checkIfAnyDraggableLeft()

checkIfAnyDraggableLeft = () ->
  if stepOneDoc.find('.importing_pins li.pin:visible').length == 0
    stepOneDoc.find('.importing_pins ul').append("<div class='no-more'>No more pins.</div>") if stepOneDoc.find('.importing_pins .no-more').length == 0
  else
    stepOneDoc.find('.importing_pins .no-more').remove()
  

initOnceBoardsAreLoaded = () ->
  # Add draggable/droppable effects
  dropOpts = {
    hoverClass: "ui-state-active",
    drop: (event, ui) ->
      $(this).find('.ourBoardPins').append( $(ui.draggable).css({left: 0, top: 0}) )
      setTimeout(hideShowPinsForSelectedBoard, 1)
  }
  dropToPinterestOpts = {
    hoverClass: "ui-state-active",
    drop: (event, ui) ->
      $(this).find('.importing_pins ul').append( $(ui.draggable).css({left: 0, top: 0}) )
      setTimeout(hideShowPinsForSelectedBoard, 1)
  }
  dragOpts = {
    revert: 'invalid',
    stack: stepOneDoc.find('#our_section li.board'),
    helper: 'clone',
    start: (event, ui) ->
      $(event.target).css({opacity: 0.5})
    stop: (event, ui) ->
      $(event.target).css({opacity: 1.0})
  }
  
  # http://bugs.jqueryui.com/ticket/5727 -- draggable in child window doesn't work when initialized from parent document
  getIframeWindow(stepOneFrame[0]).initializeDraggableFromParent([
    ['.importing_pins li.pin',  'draggable', dragOpts],
    ['#our_section li.board',   'droppable', dropOpts],
    ['#pinterest_section',      'droppable', dropToPinterestOpts]
  ])


transitionToStepOne = () ->
  ensureFrameWrapper()
  if (stepTwoFrame)
    stepTwoFrame.hide()
  stepOneFrame ||= $('<iframe class="ppParentPinsImporter">').appendTo( iframeWrapper )
  stepOneFrame.height( outputDivWrapper.height() - outputDiv.offset().top ).show()
  stepOneFrame.contents()[0].open()
  stepOneDoc = stepOneFrame.contents()
  stepOneFrame.contents()[0].write( JST['templates/bookmarklet/pinterest/step_1']({boards: boardsData, cssUrl: cssUrl}) )


initStepOneFunctionality = () ->  
  $.getJSON boardsUrl, (json) ->
    context = {
      boards: json,
      absoluteURL: (rel) ->
        return rel if rel.match(/:\/\//)
        host + rel
      pluralize: (i, singular, plural) ->
        i + ' ' + (if i == 1 then singular else plural)
    }
    stepOneDoc.find('#our_section').html( JST['templates/bookmarklet/pinterest/our_boards'](context) )
    initOnceBoardsAreLoaded()

  stepOneDoc.find('#ppSubmitBoardsSortedLink').on 'click', () ->
    transitionToStepTwo()

  # Only show pins from selected board
  stepOneDoc.on 'click', '.importing_boards li', (e) ->
    li = if this.tagName == 'LI' then $(this) else $(this).parents('li').first()
    li.siblings().removeClass('selected')
    li.addClass('selected')
    hideShowPinsForSelectedBoard()  

window.ppImporter.stepOneIframeLoaded = () ->
  initStepOneFunctionality()


dataForPinID = (id) ->
  for board in boardsData
    for pin in board.pins
      return pin if pin.id == id
  null

# Render template with the pinterest data
processingAllPins.done () ->
  window.data = boardsData
  progressDiv.remove()
  transitionToStepOne()


transitionToStepTwo = () ->
  # Loop through the #our_section boards and collect pinterest data for any with pins to be imported
  toImport = {}
  boardsWithPins = []
  for board in stepOneDoc.find('#our_section li.board')
    ourBoardID = $(board).data('boardId')
    thisBoardData = []
    for pin in $(board).find('.ourBoardPins li')
      data = dataForPinID( $(pin).data('pinId') )
      thisBoardData.push(data) if data
    
    if thisBoardData.length
      toImport[ourBoardID] = thisBoardData 
      boardsWithPins.push(ourBoardID)
  
  # Now that we have our list of things to import, what to do?
  if boardsWithPins.length == 0
    return alert("You haven't yet selected any pins to import. Please drag at least one Pinterest pin down onto the ParentPins board you want to save it to.")

  initStepTwo(toImport)


handlePostedMessage = (event) ->
  if event.data == 'previous'
    transitionToStepOne()
  

initStepTwo = (toImport) ->
  ensureFrameWrapper()
  stepOneFrame.hide()
  stepTwoFrame ||= $('<iframe class="ppParentPinsImporter" name="ppParentPinsImporterStep2Frame">').appendTo( iframeWrapper )
  stepTwoFrame.height( outputDivWrapper.height() - outputDiv.offset().top )
  
  # Note: loading the data as a param string inside a form so we can send a POST request (no URL length limit), but not via ajax (had authentication issues)
  stepTwoFrame.contents()[0].write( JST['templates/bookmarklet/pinterest/step_2_load']({data_string: $.param(toImport), stepTwoURL: stepTwoURL}) )
