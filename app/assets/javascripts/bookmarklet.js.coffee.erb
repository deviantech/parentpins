//= require templates/bookmarklet/base
//= require templates/bookmarklet/potential
//= require jquery-imagesloaded-min.module

# TODO - how to not mess with calling page's jquery version?
# TODO - how to wrap template includes in our bigger function to protect it from including page's content?


do(document = document, jQuery = window.jQuery) -> 
  # Config
  popupName = 'ParentPinBookmarklet'
  cssUrl = '//<%= HOST %>/assets/bookmarklet.css'
  minJQversion = '1.6.0'
  desiredJQversion = '1.8.2'
  minImageWidth = 192
  minImageHeight = 150
  pinBaseUrl = '//<%= HOST %><%= Rails.application.routes.url_helpers.bookmarklet_popup_path %>'
  popupHeight = 640
  popupWidth = 640
  
  # Our "global" to share variables within nested coffeescript
  Global = Global || {}

  prepForBookmarklet = ->
    # check prior inclusion and version
    if (not jQuery? || jQuery.fn.jquery < minJQversion)
      done = false
      script = document.createElement("script")
      script.src = "//ajax.googleapis.com/ajax/libs/jquery/" + desiredJQversion + "/jquery.min.js"
      script.onload = script.onreadystatechange = ->
        if !done && (!this.readyState || this.readyState == "loaded" || this.readyState == "complete")
          done = true;
          jQuery = window.jQuery
          weHavejQuery()
      document.getElementsByTagName("head")[0].appendChild(script)
    else
      weHavejQuery()

  # Just to be sure $ is available and not in compatibility mode on the host site
  weHavejQuery = ->
    includeBookmarkletStyles()
    # Allow bundling imagesloaded plugin directly in script, but don't require until we're sure there's a decent version of jQuery to work with
    require('jquery-imagesloaded-min');
    initBookmarkletWithjQuery(jQuery)
  
  includeBookmarkletStyles = ->
    return if ($('link#'+popupName+'CSS').length)
    $('head').append('<link href="' + cssUrl + '?r=' + (Math.random() * 9999999) + '" media="all" rel="stylesheet" type="text/css" id="' + popupName + 'CSS" />')
        
  # Close popup if any are open
  initBookmarkletWithjQuery = ($) ->
    if ($('#'+popupName).length)
      closeBookmarklet()
    else
      Global.imageBase = $( JST['templates/bookmarklet/base']({popupName: popupName}) ).appendTo( $('body') ).on('click', '#ppClose', closeBookmarklet).find('#ppBookmarkletContent');
      Global.imageBase.on('click', 'a.potentialImage', switchToPinView)
      # Note that in order to get correct height we have to embed images in the document somewhere... and that location has to be displayed, but not visible
      Global.imageTestbed = $('<div class="imageTestbed"></div>').appendTo(Global.imageBase.parent()).css({visibility: 'hidden', height: '0px', overflow: 'hidden'});
      startEvaluatingPotentialImages()
      notifyIfNoImagesFound = () ->
        if Global.imageBase && (!Global.potentials || Global.potentials.length == 0)
          Global.imageBase.html( $('<div id="noPotentialImages">No pinnable images found on this page.</div>') );
      setTimeout(notifyIfNoImagesFound, 1000)

  closeBookmarklet = ->
    $('#'+popupName).fadeOut ->
      $(this).remove()
    return false



  addImage = (img) ->
    if !Global.imageBase
      console.log('Attempting to add image before template has been processed')
    else
      Global.potentials = Global.potentials || []
      Global.potentials.push(img)
      added = $( JST['templates/bookmarklet/potential']({image: img}) ).appendTo( Global.imageBase )
    
  
  isImageBigEnough = (data) ->
    data.width && data.width >= minImageWidth && data.height && data.height >= minImageHeight
  
  
  # Given one or more versions of the same image, continue processing with at most ONE of the versions
  evaluateImageSet = (images...) ->
    mapping = {}
    sizes = []

    for img in images
      do (img) ->
        # If images are the same size, it doesn't matter which we choose, so OK to use dictionary here
        data = imgToData(img)
        mapping[data.area] = data
        sizes.push(data.area)
    
    # Grab largest
    biggest = mapping[ Math.max.apply(Math, sizes) ]    
    if isImageBigEnough(biggest)
      addImage(biggest)


  startEvaluatingPotentialImages = ->
    allImages = $("img:not('.nonPinnable')")
  
    # For every image, if it's in a link to another image, use the linked one instead. Otherwise, add to considering list if img is large enough
    for img in allImages
      do (img) ->
        $img = $(img)
        imgExt = $img.attr('src').match(/\.\w+?$/)
        link = $img.parents('a').first().attr('href')
      
        # If small image linking to larger image with same extension, use larger image instead
        if link and imgExt and (endsWithSameExtension = new RegExp(imgExt+'$')) and link.match(endsWithSameExtension)          
          linked = new Image()
          linked.src = link
          $linked = $(linked)
          $linked.imagesLoaded ->
            evaluateImageSet(img, linked)
          $linked = $linked.appendTo(Global.imageTestbed)
            
        else
          evaluateImageSet(img)          
  

  # Convert image object to a hash containing the relevant keys
  imgToData = (img) ->
    $img = $(img)
    height = $img.height()  || 0
    width  = $img.width()   || 0
    area   = height * width
    
    return {
      src:    $img.attr('src'),
      link:   $img.parents('a').first().attr('href')
      height: height,
      width:  width,
      area:   area
    }

  ensureDefinedAndLimited = (str, limit) ->
    return '' if (!str? || typeof(str) == 'undefined' || str == 'undefined')
    return str.substr(0, limit) + '...' if (str.length > limit)
    return str


  switchToPinView = (e) ->
    e.preventDefault()
    potential = $(e.currentTarget)
  
    args = {
      media: potential.find('img').attr('src'),
      title: ensureDefinedAndLimited(document.title, 100),
      description: ensureDefinedAndLimited($("meta[name='description']").attr('content'), 250)
    }
      
    # Set URL to current location, unless image was in a link. Then set URL to the link href, and via to the current URL.
    args['url'] = potential.data('link') if (potential.data('link').length)
    args[ ((args['url'] && args['url'].length) ? 'via' : 'url') ] = window.location + ''
  
    url = pinBaseUrl + '?' + $.param(args)
    pinWindow = window.open(url,'pinWindow','height='+popupHeight+',width='+popupWidth+',menubar=no,status=no,toolbar=no,location=no')
    pinWindow.focus() if (window.focus)
    return false


  prepForBookmarklet(jQuery);
  null